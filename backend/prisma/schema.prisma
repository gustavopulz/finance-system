generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String        @id @default(uuid()) @db.Uuid
  email      String        @unique @db.VarChar(255)
  name       String        @db.VarChar(150)
  password   String        @db.VarChar(255)
  role       Role          @default(user)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  bills      Bills[]
  cards      Cards[]
  
  tokens     ShareTokens[] @relation("TokensCreatedBy")
  claimedTokens ShareTokens[] @relation("TokenClaimedBy")
  sharesWith CardShares[]  @relation("SharesWith")
  sharesBy   CardShares[]  @relation("SharesBy")
}

model Cards {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(150)
  order     Int
  userId    String        @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  bills     Bills[]
  shares    CardShares[]

  user      Users         @relation(fields: [userId], references: [id])
}

model Bills {
  id            String     @id @default(uuid()) @db.Uuid
  cardId        String     @db.Uuid
  userId        String     @db.Uuid
  description   String?    @db.VarChar(255)
  value         Decimal    @db.Decimal(12, 2)
  dueDate       DateTime
  status        BillStatus @default(pending)
  paid          Boolean    @default(false)
  dtPaid        DateTime?
  cancelledAt   DateTime?
  parcelado     Boolean    @default(false)
  parcelasNum   Int?
  category      String?    @db.VarChar(100)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  card          Cards      @relation(fields: [cardId], references: [id])
  user          Users      @relation(fields: [userId], references: [id])
}

model CardShares {
  id               String   @id @default(uuid()) @db.Uuid
  sharedByUserId   String   @db.Uuid
  sharedWithUserId String   @db.Uuid
  cardId           String   @db.Uuid
  createdAt        DateTime @default(now())

  card             Cards    @relation(fields: [cardId], references: [id])
  sharedByUser     Users    @relation("SharesBy", fields: [sharedByUserId], references: [id])
  sharedWithUser   Users    @relation("SharesWith", fields: [sharedWithUserId], references: [id])

  @@unique([sharedByUserId, sharedWithUserId, cardId])
  @@index([sharedWithUserId])
  @@index([sharedByUserId])
  @@index([cardId])
}

model ShareTokens {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  claimedByUserId String? @db.Uuid
  claimedAt DateTime?

  user            Users     @relation("TokensCreatedBy", fields: [userId], references: [id])
  claimedByUser   Users?    @relation("TokenClaimedBy", fields: [claimedByUserId], references: [id])

  @@index([userId])
  @@index([claimedByUserId])
}

enum Role {
  user
  admin
}

enum BillStatus {
  pending
  paid
  cancelled
}
