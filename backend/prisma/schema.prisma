generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String        @id @default(uuid()) @db.Uuid
  email      String        @unique @db.VarChar(255)
  name       String        @db.VarChar(150)
  password   String        @db.VarChar(255)
  role       Role          @default(USER)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  bills      Bills[]
  sharesBy   CardShares[]  @relation("SharesBy")
  sharesWith CardShares[]  @relation("SharesWith")
  cards      Cards[]
  tokens     ShareTokens[]
}

model Cards {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(150)
  order     Int
  userId    String        @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  bills     Bills[]
  shares    CardShares[]
  user      Users         @relation(fields: [userId], references: [id])
  tokens    ShareTokens[]
}

model Bills {
  id            String     @id @default(uuid()) @db.Uuid
  cardId        String     @db.Uuid
  userId        String     @db.Uuid
  description   String?    @db.VarChar(255)
  value         Decimal    @db.Decimal(12, 2)
  month         Int
  year          Int
  status        BillStatus @default(PENDING)
  paid          Boolean    @default(false)
  dtPaid        DateTime?
  cancelledAt   DateTime?
  responsavel   String?    @db.VarChar(150)
  origem        String?    @db.VarChar(150)
  parcelasTotal Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  card          Cards      @relation(fields: [cardId], references: [id])
  user          Users      @relation(fields: [userId], references: [id])
}

model CardShares {
  id               String   @id @default(uuid()) @db.Uuid
  cardId           String   @db.Uuid
  sharedByUserId   String   @db.Uuid
  sharedWithUserId String   @db.Uuid
  createdAt        DateTime @default(now())
  card             Cards    @relation(fields: [cardId], references: [id])
  sharedByUser     Users    @relation("SharesBy", fields: [sharedByUserId], references: [id])
  sharedWithUser   Users    @relation("SharesWith", fields: [sharedWithUserId], references: [id])
}

model ShareTokens {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  cardId    String    @db.Uuid
  createdBy String    @db.Uuid
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  card      Cards     @relation(fields: [cardId], references: [id])
  user      Users     @relation(fields: [createdBy], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum BillStatus {
  PENDING
  PAID
  CANCELLED
}
